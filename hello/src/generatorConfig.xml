<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
	<!-- 引入配置文件 -->
	<properties resource="myBatisGenerator.properties" />
	<!-- 指定数据连接驱动jar地址 -->
	<classPathEntry location="${classPath}" />
	<!-- 一个数据库一个context -->
	<context id="myContext" targetRuntime="MyBatis3">

		<!-- id: 必须配置。这个上下文的惟一标识符。该值将被用在一些错误消息。 defaultModelType:用来定义生成模型类型策略。 
			1.conditional 默认策略，为每个表生成一个Model class 
			2.flat:将所有的表中生成一个Model class，即这个类将保存所有表中字段 
			3.hierarchical ：如果表有一个主键，该模型将生成一个主键类,另一个类,用于容纳任何BLOB列在表中,和另一个类,用于容纳其余的字段。这个是一个适当的继承类之间的关系。 
			targetRuntime：此属性用于指定运行时目标生成的代码。
		    1.MyBatis3 默认值 将生成对象兼容MyBatis版本3.0和更高版本,和JSE 
			   5.0和更高版本 (例如Java模型和mapper接口将使用泛型类型)。 “by example”方法在这些生成的对象支持几乎无限的动态where子句。 
			此外,Java对象与这些生成器生成支持许多JSE 5.0特性包括参数化的类型和注释。
		    2.Ibatis2Java2 
		    3.Ibatis2Java5 
		 -->


		<!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" 
			/> -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
		<plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />
		<!-- 
		   <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin"> 
				<property name="searchString" value="Example$" /> 
				<property name="replaceString"  value="Criteria" />
		   </plugin> 
		   <plugin type="org.mybatis.generator.plugins.MapperConfigPlugin"> 
				<property name="targetPackage" value="META-INF/mybatis" /> 
				<property name="targetProject" value="hello" />  
			</plugin> 
		 -->

		<!-- 注释 -->
		<commentGenerator>
			<property name="suppressAllComments" value="true" /><!-- 是否取消注释 -->
			<property name="suppressDate" value="true" /> <!-- 是否生成注释代时间戳 -->
		</commentGenerator>
		<jdbcConnection driverClass="${jdbc_driver}"
			connectionURL="${jdbc_url}" userId="${jdbc_user}" password="${jdbc_password}" />

		<!-- 类型转换 -->
		<!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<javaModelGenerator targetPackage="com.ycfy.weixin.model"
			targetProject="${project}">
			<property name="enableSubPackages" value="false" />
			<!-- 是否针对string类型的字段在set的时候进行trim调用 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<sqlMapGenerator targetPackage="com.ycfy.weixin.mapper"
			targetProject="${project}">
			<!-- 是否在当前路径下新加一层schema,eg：fase路径com.ycfy.weixin.mapper， true:com.ycfy.weixin.mapper.[schemaName] -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<javaClientGenerator targetPackage="com.ycfy.weixin.client"
			targetProject="${project}" type="XMLMAPPER">
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>
		<table schema="tts" tableName="user_info" domainObjectName="UserInfo"
			enableInsert="true" enableUpdateByPrimaryKey="true"
			enableUpdateByExample="false" enableDeleteByPrimaryKey="true"
			enableDeleteByExample="false" enableCountByExample="false"
			enableSelectByExample="false" enableSelectByPrimaryKey="true">
			<!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 
				是否生成 example类 -->
			<!-- 忽略列，不生成bean 字段 <ignoreColumn column="pwd" /> -->
			<!-- 指定列的java数据类型 
			<columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /> 
			 -->
			 <!-- SELECT LAST_INSERT_ID() -->
			 <generatedKey column="id" sqlStatement="SELECT @@IDENTITY" />
		</table>
	</context>
</generatorConfiguration>  